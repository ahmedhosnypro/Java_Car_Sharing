type: edu
custom_name: "Welcome, customer!"
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            // If the output contains "You've returned a car!" it is wrong because the customer didn't rent a car
            if (output.contains("You've returned a rented car!")) {
                return wrong("After choosing '2. Return a rented car' option, the customer should not be able to return a car if they haven't rented one");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
                getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
                getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: src/carsharing/domain/DBManager.java
  visible: true
  text: |
    package carsharing.domain;

    public class DBManager {
        private final CompanyDAO dbCompanyDAO;
        private final CarDAO dbCarDAO;

        public DBManager(String... args) {
            DbClient dbClient = new DbClient(dataBaseName(args), "", "");
            dbCompanyDAO = new DBCompanyDAO(dbClient);
            dbCarDAO = new DBCarDAO(dbClient);
        }

        private static String dataBaseName(String... args) {
            String fileName;
            if (args.length >= 2 && args[0].equals("-databaseFileName")) {
                fileName = args[1];
            } else {
                fileName = "carsharing";
            }

            return fileName;
        }

        public CompanyDAO getDbCompanyDAO() {
            return dbCompanyDAO;
        }

        public CarDAO getDbCarDAO() {
            return dbCarDAO;
        }
    }
  learner_created: true
- name: src/carsharing/model/Car.java
  visible: true
  text: |-
    package carsharing.model;

    public class Car {
        private int id;
        private String name;
        private final int companyId;

        public Car(int id, String name, int companyId) {
            this.id = id;
            this.name = name;
            this.companyId = companyId;
        }

        public Car(String name, int companyId) {
            this.name = name;
            this.companyId = companyId;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public int getCompanyId() {
            return companyId;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return id + ". " + name;
        }
    }
  learner_created: true
- name: src/carsharing/model/Company.java
  visible: true
  text: |
    package carsharing.model;

    public class Company {
        private int id;
        private String name;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public Company(String name) {
            this.name = name;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return id + ". " + name;
        }
    }
  learner_created: true
- name: src/carsharing/command/CarList.java
  visible: true
  text: |
    package carsharing.command;

    import carsharing.Main;
    import carsharing.model.Car;

    import java.util.List;

    public class CarList extends CliCommand {
        private final int companyId;

        public CarList(int companyId) {
            name = "Car list";
            this.companyId = companyId;
        }

        @Override
        public void run() {
            List<Car> cars = Main.DBManager.getDbCarDAO().findAllByCompanyId(companyId);
            if (cars.isEmpty()) {
                System.out.println("The car list is empty!");
                return;
            }
            System.out.println("\nCar list:");
            for (int i = 0; i < cars.size(); i++) {
                System.out.println((i + 1) + ". " + cars.get(i).getName());
            }
        }
    }
  learner_created: true
- name: src/carsharing/menu/Menu.java
  visible: true
  text: |
    package carsharing.menu;

    import carsharing.Main;
    import carsharing.command.CliCommand;

    import java.util.ArrayList;
    import java.util.List;

    public abstract class Menu {
        String header;
        List<CliCommand> commands = new ArrayList<>();
        boolean hasBack;
        Menu backMenu;

        Menu(String header, boolean hasBack, Menu backMenu) {
            this.header = header;
            this.hasBack = hasBack;
            this.backMenu = backMenu;
        }

        public void run() {
            while (true) {
                System.out.println("\n"+ header);
                for (int i = 0; i < commands.size(); i++) {
                    System.out.println((i + 1) + ". " + commands.get(i).getName());
                }
                if (hasBack) {
                    System.out.println("0. Back");
                } else {
                    System.out.println("0. Exit");
                }
                int choice = Main.scanner.nextInt();
                if (choice == 0 && hasBack) {
                    backMenu.run();
                    break;
                } else if (choice == 0) {
                    System.exit(0);
                } else if (choice > 0 && choice <= commands.size()) {
                    commands.get(choice - 1).run();
                } else {
                    System.out.println("Wrong input");
                }
            }
        }
    }
  learner_created: true
- name: src/carsharing/command/CliCommand.java
  visible: true
  text: |
    package carsharing.command;

    public abstract class CliCommand {
        String name;

        public abstract void run();

        public String getName() {
            return name;
        }
    }
  learner_created: true
- name: src/carsharing/menu/ManagerMenu.java
  visible: true
  text: |
    package carsharing.menu;

    import carsharing.command.CreateCompany;
    import carsharing.command.ChooseCompany;

    public class ManagerMenu extends Menu {
        private static ManagerMenu instance;

        public ManagerMenu() {
            super("", true, MainMenu.getInstance());
            commands.add(ChooseCompany.getInstance());
            commands.add(CreateCompany.getInstance());
        }

        public static ManagerMenu getInstance() {
            if (instance == null) {
                instance = new ManagerMenu();
            }
            return instance;
        }
    }
  learner_created: true
- name: src/carsharing/menu/ChooseCompanyMenu.java
  visible: true
  text: |-
    package carsharing.menu;

    import carsharing.Main;
    import carsharing.model.Company;

    import java.util.List;

    public class ChooseCompanyMenu extends Menu {
        private final List<Company> companies;

        public ChooseCompanyMenu(List<Company> companies) {
            super("Choose the company:", true, ManagerMenu.getInstance());
            this.companies = companies;
        }

        @Override
        public void run() {
            while (true) {
                System.out.println("\n" + header);
                for (var company : companies) {
                    System.out.println(company.getId() + ". " + company.getName());
                }
                if (hasBack) {
                    System.out.println("0. Back");
                } else {
                    System.out.println("0. Exit");
                }
                int choice = Main.scanner.nextInt();
                if (choice == 0 && hasBack) {
                    backMenu.run();
                    break;
                } else if (choice == 0) {
                    System.exit(0);
                } else if (choice > 0 && choice <= companies.size()) {
                    new CompanyMenu(companies.get(choice - 1)).run();
                    break;
                } else {
                    System.out.println("Wrong input");
                }
            }
        }
    }
  learner_created: true
- name: src/carsharing/domain/DBCarDAO.java
  visible: true
  text: |
    package carsharing.domain;

    import carsharing.model.Car;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    public class DBCarDAO implements CarDAO {
        private final DbClient dbClient;

        private static final String CREATE_TABLE_CAR = """
                CREATE TABLE IF NOT EXISTS car (
                    id INT PRIMARY KEY AUTO_INCREMENT,
                    name VARCHAR UNIQUE NOT NULL,
                    company_id INT NOT NULL,
                    CONSTRAINT fk_company FOREIGN KEY (company_id)
                    REFERENCES COMPANY(id)
                );
                """;

        private static final String FIND_ALL_CARS = "SELECT * FROM car;";

        // car
        private static final String SELECT = "SELECT * FROM car WHERE id = %d";
        private static final String INSERT_DATA = "INSERT INTO car VALUES (%d , '%s', %d)";
        private static final String UPDATE_DATA = "UPDATE car SET name = '%s', company_id = %d WHERE id = %d";
        private static final String DELETE_DATA = "DELETE FROM car WHERE id = %d";

        public DBCarDAO(DbClient dbClient) {
            this.dbClient = dbClient;
            setup();
        }

        public void add(Car car) {
            // determine if the company already exists
            Optional<Car> carOptional = findById(car.getId());
            if (carOptional.isPresent()) {
                return;
            }
            // determine the next id
            List<Car> cars = findAll();
            int nextId = cars.stream().mapToInt(Car::getId).max().orElse(0) + 1;
            car.setId(nextId);
            dbClient.run(String.format(INSERT_DATA, car.getId(), car.getName(), car.getCompanyId()));
        }

        public void delete(Car car) {
            dbClient.run(String.format(DELETE_DATA, car.getId()));
        }

        public void update(Car car) {
            dbClient.run(String.format(UPDATE_DATA, car.getName(), car.getCompanyId(), car.getId()));
        }

        public Optional<Car> findById(int id) {
            List<Car> items = selectForList(String.format(SELECT, id));
            if (items.size() == 1) {
                return Optional.ofNullable(items.get(0));
            } else if (items.isEmpty()) {
                return Optional.empty();
            } else {
                throw new IllegalStateException("Query returned more than one object");
            }
        }

        @Override
        public List<Car> findAll() {
            return selectForList(FIND_ALL_CARS);
        }

        @Override
        public List<Car> findAllByCompanyId(int id) {
            return selectForList(String.format("SELECT * FROM car WHERE company_id = %d", id));
        }

        public void setup() {
            dbClient.run(CREATE_TABLE_CAR);
        }

        private List<Car> selectForList(String query) {
            List<Car> cars = new ArrayList<>();

            try (Connection con = dbClient.getConnection();
                 Statement statement = con.createStatement();
                 ResultSet resultSetItem = statement.executeQuery(query)
            ) {
                con.setAutoCommit(true);
                while (resultSetItem.next()) {
                    int id = resultSetItem.getInt("id");
                    String name = resultSetItem.getString("name");
                    int companyId = resultSetItem.getInt("company_id");
                    cars.add(new Car(id, name, companyId));
                }
                return cars;
            } catch (Exception e) {
                System.out.println("Error while executing statement: " + query + " " + e.getMessage());
            }
            return cars;
        }
    }
  learner_created: true
- name: src/carsharing/command/LogAsManager.java
  visible: true
  text: |
    package carsharing.command;

    import carsharing.menu.ManagerMenu;

    public class LogAsManager extends CliCommand {
        private static LogAsManager instance;

        private LogAsManager() {
            name = "Log in as a manager";
        }

        public static CliCommand getInstance() {
            if (instance == null) {
                instance = new LogAsManager();
            }
            return instance;
        }

        @Override
        public void run() {
            ManagerMenu.getInstance().run();
        }
    }
  learner_created: true
- name: src/carsharing/menu/MainMenu.java
  visible: true
  text: |
    package carsharing.menu;

    import carsharing.command.LogAsManager;

    public class MainMenu extends Menu {
        private static MainMenu instance;

        private MainMenu(String header, boolean hasBack, Menu backMenu) {
            super(header, hasBack, backMenu);
            commands.add(LogAsManager.getInstance());
        }

        public static MainMenu getInstance() {
            if (instance == null) {
                instance = new MainMenu("", false, null);
            }
            return instance;
        }
    }
  learner_created: true
- name: src/carsharing/command/CreateCompany.java
  visible: true
  text: |
    package carsharing.command;

    import carsharing.Main;
    import carsharing.model.Company;

    import java.util.Scanner;

    public class CreateCompany extends CliCommand {
        private static CreateCompany instance;

        private CreateCompany() {
            name = "Create a company";
        }

        public static CliCommand getInstance() {
            if (instance == null) {
                instance = new CreateCompany();
            }
            return instance;
        }

        @Override
        public void run() {
            System.out.println("Enter the company name:");
            Scanner scanner = new Scanner(System.in);
            String companyName = scanner.nextLine();
            Main.DBManager.getDbCompanyDAO().add(new Company(companyName));
            System.out.println("The company was created!");
        }
    }
  learner_created: true
- name: src/carsharing/domain/CarDAO.java
  visible: true
  text: |
    package carsharing.domain;

    import carsharing.model.Car;

    import java.util.List;
    import java.util.Optional;

    public interface CarDAO {
        void add(Car car);

        void delete(Car car);

        void update(Car car);

        Optional<Car> findById(int id);

        List<Car> findAll();

        List<Car> findAllByCompanyId(int id);
    }
  learner_created: true
- name: src/carsharing/menu/CompanyMenu.java
  visible: true
  text: |-
    package carsharing.menu;

    import carsharing.command.CarList;
    import carsharing.command.CreateCar;
    import carsharing.model.Company;

    public class CompanyMenu extends Menu {

        public CompanyMenu(Company company) {
            super("'" + company.getName() + "' company", true, ManagerMenu.getInstance());
            commands.add(new CarList(company.getId()));
            commands.add(new CreateCar(company.getId()));
        }
    }
  learner_created: true
- name: src/carsharing/domain/DBCompanyDAO.java
  visible: true
  text: |
    package carsharing.domain;

    import carsharing.model.Company;

    import java.sql.Connection;
    import java.sql.ResultSet;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    public class DBCompanyDAO implements CompanyDAO {
        private final DbClient dbClient;

        private static final String CREATE_TABLE_COMPANY = """
                CREATE TABLE IF NOT EXISTS COMPANY (
                    ID INT PRIMARY KEY AUTO_INCREMENT,
                    NAME VARCHAR(255) NOT NULL UNIQUE
                );
                """;

        private static final String FIND_ALL_COMPANIES = """
                SELECT * FROM COMPANY;
                """;

        private static final String SELECT = "SELECT * FROM COMPANY WHERE id = %d";
        private static final String INSERT_DATA = "INSERT INTO COMPANY VALUES (%d , '%s')";
        private static final String UPDATE_DATA = "UPDATE COMPANY SET name " + "= '%s' WHERE id = %d";
        private static final String DELETE_DATA = "DELETE FROM COMPANY WHERE id = %d";

        public DBCompanyDAO(DbClient dbClient) {
            this.dbClient = dbClient;
            setup();
        }


        @Override
        public void add(Company company) {
            // determine if the company already exists
            Optional<Company> companyOptional = findById(company.getId());
            if (companyOptional.isPresent()) {
                return;
            }
            // determine the next id
            List<Company> companies = findAll();
            int nextId = companies.stream().mapToInt(Company::getId).max().orElse(0) + 1;
            company.setId(nextId);
            dbClient.run(String.format(INSERT_DATA, company.getId(), company.getName()));
        }

        @Override
        public void delete(Company company) {
            dbClient.run(String.format(DELETE_DATA, company.getId()));
        }

        @Override
        public void update(Company company) {
            dbClient.run(String.format(UPDATE_DATA, company.getName(), company.getId()));
        }

        @Override
        public Optional<Company> findById(int id) {
            List<Company> items = selectForList(String.format(SELECT, id));
            if (items.size() == 1) {
                return Optional.ofNullable(items.get(0));
            } else if (items.isEmpty()) {
                return Optional.empty();
            } else {
                throw new IllegalStateException("Query returned more than one object");
            }
        }

        @Override
        public List<Company> findAll() {
            return selectForList(FIND_ALL_COMPANIES);
        }

        public void setup() {
            dbClient.run(CREATE_TABLE_COMPANY);
        }

        List<Company> selectForList(String query) {
            List<Company> companies = new ArrayList<>();

            try (Connection con = dbClient.getConnection();
                 Statement statement = con.createStatement();
                 ResultSet resultSetItem = statement.executeQuery(query)
            ) {
                con.setAutoCommit(true);
                while (resultSetItem.next()) {
                    int id = resultSetItem.getInt("id");
                    String name = resultSetItem.getString("name");
                    companies.add(new Company(id, name));
                }
                return companies;
            } catch (Exception e) {
                System.out.println("Error while executing statement: " + query + " " + e.getMessage());
            }
            return companies;
        }
    }
  learner_created: true
- name: src/carsharing/domain/CompanyDAO.java
  visible: true
  text: |
    package carsharing.domain;

    import carsharing.model.Company;

    import java.util.List;
    import java.util.Optional;

    public interface CompanyDAO {
        void add(Company company);

        void delete(Company company);

        void update(Company company);

        Optional<Company> findById(int id);

        List<Company> findAll();
    }
  learner_created: true
- name: src/carsharing/command/CreateCar.java
  visible: true
  text: |
    package carsharing.command;

    import carsharing.Main;
    import carsharing.model.Car;

    import java.util.Scanner;

    public class CreateCar extends CliCommand {
        private final int companyId;

        public CreateCar(int companyId) {
            name = "Create a car";
            this.companyId = companyId;
        }

        @Override
        public void run() {
            System.out.println("\nEnter the car name:");
            Scanner scanner = new Scanner(System.in);
            String carName = scanner.nextLine();
            Main.DBManager.getDbCarDAO().add(new Car(carName, companyId));
            System.out.println("The car was created!");
        }
    }
  learner_created: true
- name: src/carsharing/command/ChooseCompany.java
  visible: true
  text: |
    package carsharing.command;

    import carsharing.Main;
    import carsharing.menu.ChooseCompanyMenu;
    import carsharing.model.Company;

    import java.util.List;

    public class ChooseCompany extends CliCommand {
        private static ChooseCompany instance;

        private ChooseCompany() {
            name = "Company list";
        }

        public static CliCommand getInstance() {
            if (instance == null) {
                instance = new ChooseCompany();
            }
            return instance;
        }

        @Override
        public void run() {
            List<Company> companies = Main.DBManager.getDbCompanyDAO().findAll();
            if (companies.isEmpty()) {
                System.out.println("The company list is empty!");
                return;
            }
            ChooseCompanyMenu menu = new ChooseCompanyMenu(companies);
            menu.run();
        }
    }
  learner_created: true
- name: src/carsharing/domain/DbClient.java
  visible: true
  text: |-
    package carsharing.domain;

    import java.sql.*;

    public class DbClient {
        private final String url;
        private final String user;
        private final String password;

        protected static final String URL_PREFIX = "jdbc:h2:./src/carsharing/db/";

        public DbClient(String url, String user, String password) {
            this.url = URL_PREFIX + url;
            this.user = user;
            this.password = password;
        }


        public void run(String str) {
            try (Connection con = getConnection(); // Statement creation
                 Statement statement = con.createStatement()
            ) {
                con.setAutoCommit(true);
                statement.executeUpdate(str); // Statement execution
            } catch (SQLException e) {
                System.out.println("Error while executing statement: " + str + " " + e.getMessage());
            }
        }

        Connection getConnection() throws SQLException {
            return DriverManager.getConnection(url, user, password);
        }
    }
  learner_created: true
- name: src/carsharing/model/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/command/LogAsCustomer.java
  visible: true
  learner_created: true
- name: src/carsharing/menu/ChooseCustomerMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/domain/CustomerDAO.java
  visible: true
  learner_created: true
- name: src/carsharing/domain/DBCustomerDAO.java
  visible: true
  learner_created: true
- name: src/carsharing/command/CreateCustomer.java
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  text: 
  learner_created: true
- name: src/carsharing/menu/CustomerMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/command/RentCar.java
  visible: true
  learner_created: true
- name: src/carsharing/command/ReturnCar.java
  visible: true
  learner_created: true
- name: src/carsharing/command/ShowRentedCar.java
  visible: true
  learner_created: true
- name: src/carsharing/menu/RentCarMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Unchecked
record: -1
